import flash.display.Loader;
import flash.events.MouseEvent;
import flash.events.Event;
import flash.display.MovieClip;
import flash.display.DisplayObject;
import flash.display.DisplayObjectContainer;
import flash.system.System;
import flash.media.Sound;
import flash.media.SoundTransform;
import flash.media.SoundChannel;


var stage1StartFrameVector:Vector.<int> = new <int>[13, 62, 112];
var stage1EndFrameVector: Vector.<int> = new <int>[37, 86, 136];


var stage2StartFrameVector:Vector.<int> = new <int>[13, 62, 112, 160];
var stage2EndFrameVector: Vector.<int> = new <int>[37, 86, 136, 184];


var startFrameVector:Vector.<int>;
var endFrameVector: Vector.<int>;

var currentIndex : int = 0;
var currentStageMC : MovieClip;
stop();
init();

function init() :void
{
	ctrlPanel.closeBtn.addEventListener(MouseEvent.CLICK, onClickClose);
	ctrlPanel.prevBtn.addEventListener(MouseEvent.CLICK, onClickPrev);
	ctrlPanel.nextBtn.addEventListener(MouseEvent.CLICK, onClickNext);
	ctrlPanel.stage1Btn.addEventListener(MouseEvent.CLICK, onClickStage1);
	ctrlPanel.stage2Btn.addEventListener(MouseEvent.CLICK, onClickStage2);
	
	ctrlPanel.manualPlayBtn.addEventListener(MouseEvent.CLICK, onClickManualPlay);
	ctrlPanel.autoPlayBtn.addEventListener(MouseEvent.CLICK, onClickAutoPlay);
	
	onClickStage1(null);
}


function updatePrevNextVisable() : void
{
	if (currentIndex == 0)
	{
		ctrlPanel.nextBtn.visible = true;
		ctrlPanel.prevBtn.visible = false;
		
	}
	else if(currentIndex == endFrameVector.length - 1)
	{
		ctrlPanel.nextBtn.visible = false;
		ctrlPanel.prevBtn.visible = true;
	}
	else
	{
		ctrlPanel.nextBtn.visible = true;
		ctrlPanel.prevBtn.visible = true;
	}
	
}

function onClickClose(evt:MouseEvent) : void
{
	stopSound();
	if(parent.parent)
	{
		parent.parent.removeChild(parent);
	}
	else
	{
		parent.removeChild(this);
	}
}


function onClickPrev(evt:MouseEvent) : void
{
	stopSound();
	currentIndex -= 1;
	if(currentIndex < 0)
	{
		currentIndex = 0;
		return;
	}
	currentStageMC.gotoAndPlay(startFrameVector[currentIndex]);
	updatePrevNextVisable();
}

function onClickNext(evt:MouseEvent) : void
{
	stopSound();
	currentIndex += 1;
	if(currentIndex > endFrameVector.length - 1)
	{
		currentIndex = endFrameVector.length - 1;
		return;
	}
	currentStageMC.gotoAndPlay(endFrameVector[currentIndex - 1])
	updatePrevNextVisable();
}

function setCurrentIndex(index : int)
{
	currentIndex = index;
	updatePrevNextVisable();
}

stage1MC.setCurrentIndex = setCurrentIndex;
stage2MC.setCurrentIndex = setCurrentIndex;


function onClickStage1(evt:MouseEvent) : void
{
	stopSound();
	currentStageMC = stage1MC;
	stage1MC.visible = true;
	stage1MC.play();
	stage2MC.visible = false;
	stage2MC.stop();
	ctrlPanel.stage1BtnMC.gotoAndStop(1);
	ctrlPanel.stage2BtnMC.gotoAndStop(2);
	currentStageMC.gotoAndPlay(1);
	currentIndex = 0;
	
	startFrameVector = stage1StartFrameVector;
	endFrameVector = stage1EndFrameVector;
	
	updatePrevNextVisable();
}


function onClickStage2(evt:MouseEvent) : void
{
	stopSound();
	currentStageMC = stage2MC;
	stage1MC.visible = false;
	stage1MC.stop();
	stage2MC.visible = true;
	stage2MC.play();
	ctrlPanel.stage1BtnMC.gotoAndStop(2);
	ctrlPanel.stage2BtnMC.gotoAndStop(1);
	currentStageMC.gotoAndPlay(1);
	currentIndex = 0;
	
	startFrameVector = stage2StartFrameVector;
	endFrameVector = stage2EndFrameVector;
	
	updatePrevNextVisable();
}

function load( swf:String) : void
{
	var loader : Loader = new Loader();
	loader.load(new URLRequest(swf));
	addChild(loader);
}

//stage1MC.image1_1.addEventListener(MouseEvent.CLICK, onClickImg);//设计师的做法不一样
//stage1MC.image1_2.addEventListener(MouseEvent.CLICK, onClickImg);
//stage1MC.image1_3.addEventListener(MouseEvent.CLICK, onClickImg);
stage1MC.clickImgFunc = onClickImg;

stage2MC.image2_1.addEventListener(MouseEvent.CLICK, onClickImg);
stage2MC.image2_2.addEventListener(MouseEvent.CLICK, onClickImg);
stage2MC.image2_3.addEventListener(MouseEvent.CLICK, onClickImg);
stage2MC.image2_4.addEventListener(MouseEvent.CLICK, onClickImg);

function onClickImg(evt : MouseEvent): void
{
//	trace(evt.currentTarget.name);
	if(_isSwipe)
		return;
	openImageView(evt.currentTarget as MovieClip);

}

// imgViewStart--------------------------------

const zoomStep : Number = 0.25
var isZoomIn = true;
//var _timer: Timer = new Timer(10, 0);

//imgView.ctrlPanel.zoomInBtn.addEventListener(MouseEvent.MOUSE_DOWN, zoomIn_mouseDownHandler);
//imgView.ctrlPanel.zoomInBtn.addEventListener(MouseEvent.MOUSE_UP, zoomCancelHandler);
//imgView.ctrlPanel.zoomInBtn.addEventListener(MouseEvent.ROLL_OUT, zoomCancelHandler);

//imgView.ctrlPanel.zoomOutBtn.addEventListener(MouseEvent.MOUSE_DOWN, zoomOut_mouseDownHandler);
//imgView.ctrlPanel.zoomOutBtn.addEventListener(MouseEvent.MOUSE_UP, zoomCancelHandler);
//imgView.ctrlPanel.zoomOutBtn.addEventListener(MouseEvent.ROLL_OUT, zoomCancelHandler);






//===
Multitouch.inputMode=MultitouchInputMode.GESTURE; 
imgView.addEventListener(TransformGestureEvent.GESTURE_ZOOM,  onTwoFingerZoom); 


imgView.ctrlPanel.zoomOutBtn.addEventListener(MouseEvent.CLICK, onClickZoomOut);
imgView.ctrlPanel.zoomInBtn.addEventListener(MouseEvent.CLICK, onClickZoomIn);

imgView.ctrlPanel.closeBtn.addEventListener(MouseEvent.CLICK, onClickImgViewClose);

closeImageView();


var zoomScaleX : Number = 0;

function onTwoFingerZoom(event:TransformGestureEvent):void
{
	//trace("--------------onTwoFingerZoom------------------", event.scaleX,event.phase);
	if(event.scaleX == 1)
	{
		if (zoomScaleX > 0)
		{
			isZoomIn = true;
			zoomImg(null);
		}
		else if(zoomScaleX < 0)
		{
			isZoomIn = false;
			zoomImg(null);
		}
		zoomScaleX = 0;
	}
	else
	{
		zoomScaleX += (event.scaleX - 1)
		
	}

}

function onClickZoomOut(event:MouseEvent):void
{
	isZoomIn = false;
	zoomImg(null);
}

function onClickZoomIn(event:MouseEvent):void
{
	isZoomIn = true;
	zoomImg(null);
}

/*
function zoomOut_mouseDownHandler(event:MouseEvent):void
{
	isZoomIn = false;
	_timer.addEventListener(TimerEvent.TIMER, zoomImg);
	_timer.start();	
}


function zoomIn_mouseDownHandler(event:MouseEvent):void
{
	isZoomIn = true;
	_timer.addEventListener(TimerEvent.TIMER, zoomImg);
	_timer.start();		
}

function zoomCancelHandler(event:MouseEvent):void
{
	_timer.removeEventListener(TimerEvent.TIMER, zoomImg);
	_timer.reset();
	_timer.stop();
}*/

function onClickImgViewClose(evt:MouseEvent) : void
{
	//_timer.removeEventListener(TimerEvent.TIMER, zoomImg);
	closeImageView();
}

var targetBmp : Bitmap;


var cacheAutoPlay : Boolean = false;
function openImageView(mc : MovieClip) : void
{
	currentScaleIndex = 2
	var targetDisplayObject : DisplayObject  = mc.image.getChildAt(0);
	imgView.visible = true;
	var bmpd : BitmapData = new BitmapData(targetDisplayObject.width, targetDisplayObject.height);
	bmpd.draw(targetDisplayObject);
	targetBmp = new Bitmap(bmpd);
	
	imgView.scrollPane.source = targetBmp;
	updateImgView(1);
	
	if(isAutoPlay)
	{
		cacheAutoPlay = true;
		setAutoPlay(false);
	}
}

function closeImageView() : void
{

	imgView.visible = false;
	if(cacheAutoPlay)
	{
		cacheAutoPlay = false;
		setAutoPlay(true);
	}

}

//-----aaaaaa

var zoomScaleVector : Vector.<Number> = new <Number>[0.25 , 0.5, 1,  1.5,  2];
var currentScaleIndex : int;
function zoomImg(evt : Event) : void
{
	var scale : Number = targetBmp.scaleX
	if (isZoomIn )
	{
		currentScaleIndex++;
		if (currentScaleIndex >= zoomScaleVector.length)
		{
			currentScaleIndex = zoomScaleVector.length - 1;
		}
	}
	else
	{
		currentScaleIndex--;
		if (currentScaleIndex < 0)
		{
			currentScaleIndex = 0;
		}
	}
	updateImgView(zoomScaleVector[currentScaleIndex]);
}

function updateImgView(scale : Number) : void
{
	targetBmp.scaleX = targetBmp.scaleY = scale;
		
	var centerX = (imgView.scrollPane.width - targetBmp.width) * 0.5;
	
	if(centerX > 0)
	{
		targetBmp.x = centerX;
	}
	
	var centerY = (imgView.scrollPane.height - targetBmp.height) * 0.5;
	if(centerY > 0)
	{
		targetBmp.y = centerY;
	}
	
	imgView.scrollPane.update();
	imgView.scrollPane.horizontalScrollPosition = imgView.scrollPane.maxHorizontalScrollPosition * 0.5;
	imgView.scrollPane.verticalScrollPosition = imgView.scrollPane.maxVerticalScrollPosition * 0.5;
}




///----------------


reigsterSwipe(stage1MC);
reigsterSwipe(stage2MC);

var _prevX : Number = 0;
var _isSwipe : Boolean = false;
function reigsterSwipe(displayObject : DisplayObject) : void
{
	displayObject.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownSwipeHandler);
	displayObject.addEventListener(MouseEvent.MOUSE_UP, mouseUpSwipeHandler);
	displayObject.addEventListener(MouseEvent.ROLL_OUT, mouseUpSwipeHandler);
}

function mouseDownSwipeHandler(evt : MouseEvent) : void
{
	_prevX = evt.stageX;
	_isSwipe = false;
}

function mouseUpSwipeHandler(evt : MouseEvent) : void
{
	if(_prevX == 0)
		return;
	
	var delta : Number = evt.stageX - _prevX;
	_prevX = 0;
	if(Math.abs(delta) < 10)
		return;
	_isSwipe = true;
	
	if (delta > 0)
	{
		onClickPrev(null);
	}
	else
	{
		onClickNext(null);
	}
	
}


//imgView end--------------------------------

stage1MC.rootMC = this;
stage2MC.rootMC = this;
var rootMC : MovieClip = this.parent.parent as MovieClip;

var snd : Sound;
var sndCH : SoundChannel;
var sndT : SoundTransform = new SoundTransform(1);

var bgSndVolumeNormal : Number = 0.8;
var bgSndVolumeQuiet : Number = 0.25;

var prevSndCls : Class;

function playSound(cls : Class, volume : Number = 1) : void
{
	
	if (prevSndCls == cls)
		return;
	stopSound();
	prevSndCls = cls;
	snd = new cls();
	sndT.volume = volume;
	sndCH = snd.play(0, 0, sndT);
	sndCH.addEventListener(Event.SOUND_COMPLETE, onSoundComplete);
	if (rootMC != null)
	{
		rootMC.setBGVolume(bgSndVolumeQuiet);
	}
	
}

function stopSound():void
{
	if (sndCH != null)
	{
		sndCH.removeEventListener(Event.SOUND_COMPLETE, onSoundComplete);
		sndCH.stop();
		sndCH = null;
		
		if (rootMC != null)
		{
			rootMC.setBGVolume(bgSndVolumeNormal);
		}
	}

}


function onSoundComplete(evt: Event)
{
	trace("onSoundComplete");
	if (rootMC != null)
	{
		rootMC.setBGVolume(bgSndVolumeNormal);
	}
}


var isAutoPlay = true;
setAutoPlay(isAutoPlay);
function setAutoPlay(isAuto) :  void
{
	isAutoPlay = isAuto
	stage1MC.isAutoPlay = isAutoPlay;
	stage2MC.isAutoPlay = isAutoPlay;
	if (ctrlPanel)
	{
		ctrlPanel.gotoAndStop(isAutoPlay ? 2 : 1);
	}
	
}

function onClickAutoPlay(evt:MouseEvent):void
{
	setAutoPlay(true);
}

function onClickManualPlay(evt:MouseEvent):void
{
	setAutoPlay(false);
}












